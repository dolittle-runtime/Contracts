// Copyright (c) Dolittle. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

syntax = "proto3";

import "Fundamentals/Protobuf/Uuid.proto";
import "Fundamentals/Protobuf/Failure.proto";
import "Fundamentals/Services/ReverseCallContext.proto";
import "Runtime/Events/Committed.proto";
import "Runtime/Events.Processing/Processors.proto";

package dolittle.runtime.events.processing;

option csharp_namespace = "Dolittle.Runtime.Events.Processing.Contracts";

message SuccessfulFilter {
    bool isIncluded = 1;
    protobuf.Uuid partitionId = 2;
}

message FiltersRegistrationRequest {
    services.ReverseCallArgumentsContext callContext = 1;
    protobuf.Uuid scopeId = 2;
    protobuf.Uuid filterId = 3;
}

message FilterResponse {
    services.ReverseCallResponseContext callContext = 1;
    oneof Result {
        SuccessfulFilter success = 2;
        ProcessorFailure failed = 3;
    }
}

message FiltersClientToRuntimeMessage {
    oneof Message {
        FiltersRegistrationRequest registrationRequest = 1;
        FilterResponse filterResult = 2;
    }
}

message FilterRegistrationResponse {
    protobuf.Failure failure = 1;
}

message FilterEventRequest {
    services.ReverseCallRequestContext callContext = 1;
    runtime.events.CommittedEvent event = 2;
    protobuf.Uuid partitionId = 3;
    RetryProcessingState retryProcessingState = 4;
}

message FilterRuntimeToClientMessage {
    oneof Message {
        FilterRegistrationResponse registrationResponse = 1;
        FilterEventRequest filterRequest = 2;
    }
}

service Filters {
    rpc Connect(stream FiltersClientToRuntimeMessage) returns(stream FilterRuntimeToClientMessage);
}