// Copyright (c) Dolittle. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

syntax = "proto3";

import "Fundamentals/Artifacts/Artifact.proto";
import "Fundamentals/Protobuf/Uuid.proto";
import "Fundamentals/Protobuf/Failure.proto";
import "Fundamentals/Services/ReverseCallContext.proto";
import "Runtime/Events/Committed.proto";
import "Runtime/Events.Processing/Processors.proto";

package dolittle.runtime.events.processing;

option csharp_namespace = "Dolittle.Runtime.Events.Processing.Contracts";

message EventHandlersRegistrationRequest {
    services.ReverseCallArgumentsContext callContext = 1;
    protobuf.Uuid scopeId = 2;
    protobuf.Uuid eventHandlerId = 3;
    repeated artifacts.Artifact types = 4;
    bool partitioned = 5;
}

message EventHandlerResponse {
    services.ReverseCallResponseContext callContext = 1;
    ProcessorFailure failed = 2; // If not set/empty - no failure
}

message EventHandlersClientToRuntimeMessage {
    oneof Message {
        EventHandlersRegistrationRequest registrationRequest = 1;
        EventHandlerResponse handleResult = 2;
    }
}

message EventHandlerRegistrationResponse {
    protobuf.Failure failure = 1;
}

message HandleEventRequest {
    services.ReverseCallRequestContext callContext = 1;
    runtime.events.CommittedEvent event = 2;
    protobuf.Uuid partitionId = 3;
    RetryProcessingState retryProcessingState = 4;
}

message EventHandlerRuntimeToClientMessage {
    oneof Message {
        EventHandlerRegistrationResponse registrationResponse = 1;
        HandleEventRequest handleRequest = 2;
    }
}

service EventHandlers {
    rpc Connect(stream EventHandlersClientToRuntimeMessage) returns(stream EventHandlerRuntimeToClientMessage);
}
