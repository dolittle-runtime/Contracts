"use strict";
// source: Events/CommittedAggregateEvents.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
var Events_CommittedAggregateEvent_pb = require('../Events/CommittedAggregateEvent_pb.js');
goog.object.extend(proto, Events_CommittedAggregateEvent_pb);
goog.exportSymbol('proto.dolittle.runtime.events.CommittedAggregateEvents', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dolittle.runtime.events.CommittedAggregateEvents = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.dolittle.runtime.events.CommittedAggregateEvents.repeatedFields_, null);
};
goog.inherits(proto.dolittle.runtime.events.CommittedAggregateEvents, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.dolittle.runtime.events.CommittedAggregateEvents.displayName = 'proto.dolittle.runtime.events.CommittedAggregateEvents';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dolittle.runtime.events.CommittedAggregateEvents.repeatedFields_ = [3];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.dolittle.runtime.events.CommittedAggregateEvents.prototype.toObject = function (opt_includeInstance) {
        return proto.dolittle.runtime.events.CommittedAggregateEvents.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.dolittle.runtime.events.CommittedAggregateEvents} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.dolittle.runtime.events.CommittedAggregateEvents.toObject = function (includeInstance, msg) {
        var f, obj = {
            eventsource: msg.getEventsource_asB64(),
            aggregateroot: msg.getAggregateroot_asB64(),
            eventsList: jspb.Message.toObjectList(msg.getEventsList(), Events_CommittedAggregateEvent_pb.CommittedAggregateEvent.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dolittle.runtime.events.CommittedAggregateEvents}
 */
proto.dolittle.runtime.events.CommittedAggregateEvents.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.dolittle.runtime.events.CommittedAggregateEvents;
    return proto.dolittle.runtime.events.CommittedAggregateEvents.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dolittle.runtime.events.CommittedAggregateEvents} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dolittle.runtime.events.CommittedAggregateEvents}
 */
proto.dolittle.runtime.events.CommittedAggregateEvents.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setEventsource(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setAggregateroot(value);
                break;
            case 3:
                var value = new Events_CommittedAggregateEvent_pb.CommittedAggregateEvent;
                reader.readMessage(value, Events_CommittedAggregateEvent_pb.CommittedAggregateEvent.deserializeBinaryFromReader);
                msg.addEvents(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dolittle.runtime.events.CommittedAggregateEvents.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.dolittle.runtime.events.CommittedAggregateEvents.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dolittle.runtime.events.CommittedAggregateEvents} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dolittle.runtime.events.CommittedAggregateEvents.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getEventsource_asU8();
    if (f.length > 0) {
        writer.writeBytes(1, f);
    }
    f = message.getAggregateroot_asU8();
    if (f.length > 0) {
        writer.writeBytes(2, f);
    }
    f = message.getEventsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(3, f, Events_CommittedAggregateEvent_pb.CommittedAggregateEvent.serializeBinaryToWriter);
    }
};
/**
 * optional bytes eventSource = 1;
 * @return {!(string|Uint8Array)}
 */
proto.dolittle.runtime.events.CommittedAggregateEvents.prototype.getEventsource = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * optional bytes eventSource = 1;
 * This is a type-conversion wrapper around `getEventsource()`
 * @return {string}
 */
proto.dolittle.runtime.events.CommittedAggregateEvents.prototype.getEventsource_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getEventsource()));
};
/**
 * optional bytes eventSource = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEventsource()`
 * @return {!Uint8Array}
 */
proto.dolittle.runtime.events.CommittedAggregateEvents.prototype.getEventsource_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getEventsource()));
};
/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dolittle.runtime.events.CommittedAggregateEvents} returns this
 */
proto.dolittle.runtime.events.CommittedAggregateEvents.prototype.setEventsource = function (value) {
    return jspb.Message.setProto3BytesField(this, 1, value);
};
/**
 * optional bytes aggregateRoot = 2;
 * @return {!(string|Uint8Array)}
 */
proto.dolittle.runtime.events.CommittedAggregateEvents.prototype.getAggregateroot = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * optional bytes aggregateRoot = 2;
 * This is a type-conversion wrapper around `getAggregateroot()`
 * @return {string}
 */
proto.dolittle.runtime.events.CommittedAggregateEvents.prototype.getAggregateroot_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getAggregateroot()));
};
/**
 * optional bytes aggregateRoot = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAggregateroot()`
 * @return {!Uint8Array}
 */
proto.dolittle.runtime.events.CommittedAggregateEvents.prototype.getAggregateroot_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getAggregateroot()));
};
/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dolittle.runtime.events.CommittedAggregateEvents} returns this
 */
proto.dolittle.runtime.events.CommittedAggregateEvents.prototype.setAggregateroot = function (value) {
    return jspb.Message.setProto3BytesField(this, 2, value);
};
/**
 * repeated CommittedAggregateEvent Events = 3;
 * @return {!Array<!proto.dolittle.runtime.events.CommittedAggregateEvent>}
 */
proto.dolittle.runtime.events.CommittedAggregateEvents.prototype.getEventsList = function () {
    return /** @type{!Array<!proto.dolittle.runtime.events.CommittedAggregateEvent>} */ (jspb.Message.getRepeatedWrapperField(this, Events_CommittedAggregateEvent_pb.CommittedAggregateEvent, 3));
};
/**
 * @param {!Array<!proto.dolittle.runtime.events.CommittedAggregateEvent>} value
 * @return {!proto.dolittle.runtime.events.CommittedAggregateEvents} returns this
*/
proto.dolittle.runtime.events.CommittedAggregateEvents.prototype.setEventsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 3, value);
};
/**
 * @param {!proto.dolittle.runtime.events.CommittedAggregateEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dolittle.runtime.events.CommittedAggregateEvent}
 */
proto.dolittle.runtime.events.CommittedAggregateEvents.prototype.addEvents = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.dolittle.runtime.events.CommittedAggregateEvent, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dolittle.runtime.events.CommittedAggregateEvents} returns this
 */
proto.dolittle.runtime.events.CommittedAggregateEvents.prototype.clearEventsList = function () {
    return this.setEventsList([]);
};
goog.object.extend(exports, proto.dolittle.runtime.events);
//# sourceMappingURL=data:application/json;base64,