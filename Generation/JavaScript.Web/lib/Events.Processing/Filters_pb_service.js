"use strict";
// package: dolittle.runtime.events.processing
// file: Events.Processing/Filters.proto
var Events_Processing_Filters_pb = require("../Events.Processing/Filters_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;
var Filters = (function () {
    function Filters() { }
    Filters.serviceName = "dolittle.runtime.events.processing.Filters";
    return Filters;
}());
Filters.Connect = {
    methodName: "Connect",
    service: Filters,
    requestStream: true,
    responseStream: true,
    requestType: Events_Processing_Filters_pb.FilterClientToRuntimeResponse,
    responseType: Events_Processing_Filters_pb.FilterRuntimeToClientRequest
};
exports.Filters = Filters;
function FiltersClient(serviceHost, options) {
    this.serviceHost = serviceHost;
    this.options = options || {};
}
FiltersClient.prototype.connect = function connect(metadata) {
    var listeners = {
        data: [],
        end: [],
        status: []
    };
    var client = grpc.client(Filters.Connect, {
        host: this.serviceHost,
        metadata: metadata,
        transport: this.options.transport
    });
    client.onEnd(function (status, statusMessage, trailers) {
        listeners.status.forEach(function (handler) {
            handler({ code: status, details: statusMessage, metadata: trailers });
        });
        listeners.end.forEach(function (handler) {
            handler({ code: status, details: statusMessage, metadata: trailers });
        });
        listeners = null;
    });
    client.onMessage(function (message) {
        listeners.data.forEach(function (handler) {
            handler(message);
        });
    });
    client.start(metadata);
    return {
        on: function (type, handler) {
            listeners[type].push(handler);
            return this;
        },
        write: function (requestMessage) {
            client.send(requestMessage);
            return this;
        },
        end: function () {
            client.finishSend();
        },
        cancel: function () {
            listeners = null;
            client.close();
        }
    };
};
exports.FiltersClient = FiltersClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmlsdGVyc19wYl9zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJFdmVudHMuUHJvY2Vzc2luZy9GaWx0ZXJzX3BiX3NlcnZpY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDhDQUE4QztBQUM5Qyx3Q0FBd0M7QUFFeEMsSUFBSSw0QkFBNEIsR0FBRyxPQUFPLENBQUMsaUNBQWlDLENBQUMsQ0FBQztBQUM5RSxJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFFcEQsSUFBSSxPQUFPLEdBQUcsQ0FBQztJQUNiLFNBQVMsT0FBTyxLQUFJLENBQUM7SUFDckIsT0FBTyxDQUFDLFdBQVcsR0FBRyw0Q0FBNEMsQ0FBQztJQUNuRSxPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRUwsT0FBTyxDQUFDLE9BQU8sR0FBRztJQUNoQixVQUFVLEVBQUUsU0FBUztJQUNyQixPQUFPLEVBQUUsT0FBTztJQUNoQixhQUFhLEVBQUUsSUFBSTtJQUNuQixjQUFjLEVBQUUsSUFBSTtJQUNwQixXQUFXLEVBQUUsNEJBQTRCLENBQUMsNkJBQTZCO0lBQ3ZFLFlBQVksRUFBRSw0QkFBNEIsQ0FBQyw0QkFBNEI7Q0FDeEUsQ0FBQztBQUVGLE9BQU8sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0FBRTFCLFNBQVMsYUFBYSxDQUFDLFdBQVcsRUFBRSxPQUFPO0lBQ3pDLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0lBQy9CLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxJQUFJLEVBQUUsQ0FBQztBQUMvQixDQUFDO0FBRUQsYUFBYSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUcsU0FBUyxPQUFPLENBQUMsUUFBUTtJQUN6RCxJQUFJLFNBQVMsR0FBRztRQUNkLElBQUksRUFBRSxFQUFFO1FBQ1IsR0FBRyxFQUFFLEVBQUU7UUFDUCxNQUFNLEVBQUUsRUFBRTtLQUNYLENBQUM7SUFDRixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUU7UUFDeEMsSUFBSSxFQUFFLElBQUksQ0FBQyxXQUFXO1FBQ3RCLFFBQVEsRUFBRSxRQUFRO1FBQ2xCLFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVM7S0FDbEMsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLE1BQU0sRUFBRSxhQUFhLEVBQUUsUUFBUTtRQUNwRCxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVLE9BQU87WUFDeEMsT0FBTyxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ3hFLENBQUMsQ0FBQyxDQUFDO1FBQ0gsU0FBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsVUFBVSxPQUFPO1lBQ3JDLE9BQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUN4RSxDQUFDLENBQUMsQ0FBQztRQUNILFNBQVMsR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQyxDQUFDLENBQUM7SUFDSCxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsT0FBTztRQUNoQyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLE9BQU87WUFDdEMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUM7SUFDSCxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZCLE9BQU87UUFDTCxFQUFFLEVBQUUsVUFBVSxJQUFJLEVBQUUsT0FBTztZQUN6QixTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzlCLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUNELEtBQUssRUFBRSxVQUFVLGNBQWM7WUFDN0IsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUM1QixPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7UUFDRCxHQUFHLEVBQUU7WUFDSCxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDdEIsQ0FBQztRQUNELE1BQU0sRUFBRTtZQUNOLFNBQVMsR0FBRyxJQUFJLENBQUM7WUFDakIsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2pCLENBQUM7S0FDRixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsT0FBTyxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBwYWNrYWdlOiBkb2xpdHRsZS5ydW50aW1lLmV2ZW50cy5wcm9jZXNzaW5nXG4vLyBmaWxlOiBFdmVudHMuUHJvY2Vzc2luZy9GaWx0ZXJzLnByb3RvXG5cbnZhciBFdmVudHNfUHJvY2Vzc2luZ19GaWx0ZXJzX3BiID0gcmVxdWlyZShcIi4uL0V2ZW50cy5Qcm9jZXNzaW5nL0ZpbHRlcnNfcGJcIik7XG52YXIgZ3JwYyA9IHJlcXVpcmUoXCJAaW1wcm9iYWJsZS1lbmcvZ3JwYy13ZWJcIikuZ3JwYztcblxudmFyIEZpbHRlcnMgPSAoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGaWx0ZXJzKCkge31cbiAgRmlsdGVycy5zZXJ2aWNlTmFtZSA9IFwiZG9saXR0bGUucnVudGltZS5ldmVudHMucHJvY2Vzc2luZy5GaWx0ZXJzXCI7XG4gIHJldHVybiBGaWx0ZXJzO1xufSgpKTtcblxuRmlsdGVycy5Db25uZWN0ID0ge1xuICBtZXRob2ROYW1lOiBcIkNvbm5lY3RcIixcbiAgc2VydmljZTogRmlsdGVycyxcbiAgcmVxdWVzdFN0cmVhbTogdHJ1ZSxcbiAgcmVzcG9uc2VTdHJlYW06IHRydWUsXG4gIHJlcXVlc3RUeXBlOiBFdmVudHNfUHJvY2Vzc2luZ19GaWx0ZXJzX3BiLkZpbHRlckNsaWVudFRvUnVudGltZVJlc3BvbnNlLFxuICByZXNwb25zZVR5cGU6IEV2ZW50c19Qcm9jZXNzaW5nX0ZpbHRlcnNfcGIuRmlsdGVyUnVudGltZVRvQ2xpZW50UmVxdWVzdFxufTtcblxuZXhwb3J0cy5GaWx0ZXJzID0gRmlsdGVycztcblxuZnVuY3Rpb24gRmlsdGVyc0NsaWVudChzZXJ2aWNlSG9zdCwgb3B0aW9ucykge1xuICB0aGlzLnNlcnZpY2VIb3N0ID0gc2VydmljZUhvc3Q7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG59XG5cbkZpbHRlcnNDbGllbnQucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiBjb25uZWN0KG1ldGFkYXRhKSB7XG4gIHZhciBsaXN0ZW5lcnMgPSB7XG4gICAgZGF0YTogW10sXG4gICAgZW5kOiBbXSxcbiAgICBzdGF0dXM6IFtdXG4gIH07XG4gIHZhciBjbGllbnQgPSBncnBjLmNsaWVudChGaWx0ZXJzLkNvbm5lY3QsIHtcbiAgICBob3N0OiB0aGlzLnNlcnZpY2VIb3N0LFxuICAgIG1ldGFkYXRhOiBtZXRhZGF0YSxcbiAgICB0cmFuc3BvcnQ6IHRoaXMub3B0aW9ucy50cmFuc3BvcnRcbiAgfSk7XG4gIGNsaWVudC5vbkVuZChmdW5jdGlvbiAoc3RhdHVzLCBzdGF0dXNNZXNzYWdlLCB0cmFpbGVycykge1xuICAgIGxpc3RlbmVycy5zdGF0dXMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgaGFuZGxlcih7IGNvZGU6IHN0YXR1cywgZGV0YWlsczogc3RhdHVzTWVzc2FnZSwgbWV0YWRhdGE6IHRyYWlsZXJzIH0pO1xuICAgIH0pO1xuICAgIGxpc3RlbmVycy5lbmQuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgaGFuZGxlcih7IGNvZGU6IHN0YXR1cywgZGV0YWlsczogc3RhdHVzTWVzc2FnZSwgbWV0YWRhdGE6IHRyYWlsZXJzIH0pO1xuICAgIH0pO1xuICAgIGxpc3RlbmVycyA9IG51bGw7XG4gIH0pO1xuICBjbGllbnQub25NZXNzYWdlKGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgbGlzdGVuZXJzLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgaGFuZGxlcihtZXNzYWdlKTtcbiAgICB9KVxuICB9KTtcbiAgY2xpZW50LnN0YXJ0KG1ldGFkYXRhKTtcbiAgcmV0dXJuIHtcbiAgICBvbjogZnVuY3Rpb24gKHR5cGUsIGhhbmRsZXIpIHtcbiAgICAgIGxpc3RlbmVyc1t0eXBlXS5wdXNoKGhhbmRsZXIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICB3cml0ZTogZnVuY3Rpb24gKHJlcXVlc3RNZXNzYWdlKSB7XG4gICAgICBjbGllbnQuc2VuZChyZXF1ZXN0TWVzc2FnZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGVuZDogZnVuY3Rpb24gKCkge1xuICAgICAgY2xpZW50LmZpbmlzaFNlbmQoKTtcbiAgICB9LFxuICAgIGNhbmNlbDogZnVuY3Rpb24gKCkge1xuICAgICAgbGlzdGVuZXJzID0gbnVsbDtcbiAgICAgIGNsaWVudC5jbG9zZSgpO1xuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydHMuRmlsdGVyc0NsaWVudCA9IEZpbHRlcnNDbGllbnQ7XG5cbiJdfQ==