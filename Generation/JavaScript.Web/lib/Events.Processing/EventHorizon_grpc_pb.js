// GENERATED CODE -- DO NOT EDIT!
// Original file comments:
// Copyright (c) Dolittle. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
//
'use strict';
var grpc = require('grpc');
var Events_Processing_EventHorizon_pb = require('../Events.Processing/EventHorizon_pb.js');
var Events_CommittedEvent_pb = require('../Events/CommittedEvent_pb.js');
function serialize_dolittle_runtime_events_processing_EventHorizonPublisherToSubscriberResponse(arg) {
    if (!(arg instanceof Events_Processing_EventHorizon_pb.EventHorizonPublisherToSubscriberResponse)) {
        throw new Error('Expected argument of type dolittle.runtime.events.processing.EventHorizonPublisherToSubscriberResponse');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dolittle_runtime_events_processing_EventHorizonPublisherToSubscriberResponse(buffer_arg) {
    return Events_Processing_EventHorizon_pb.EventHorizonPublisherToSubscriberResponse.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dolittle_runtime_events_processing_EventHorizonSubscriberToPublisherRequest(arg) {
    if (!(arg instanceof Events_Processing_EventHorizon_pb.EventHorizonSubscriberToPublisherRequest)) {
        throw new Error('Expected argument of type dolittle.runtime.events.processing.EventHorizonSubscriberToPublisherRequest');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dolittle_runtime_events_processing_EventHorizonSubscriberToPublisherRequest(buffer_arg) {
    return Events_Processing_EventHorizon_pb.EventHorizonSubscriberToPublisherRequest.deserializeBinary(new Uint8Array(buffer_arg));
}
var EventHorizonService = exports.EventHorizonService = {
    subscribe: {
        path: '/dolittle.runtime.events.processing.EventHorizon/Subscribe',
        requestStream: false,
        responseStream: true,
        requestType: Events_Processing_EventHorizon_pb.EventHorizonSubscriberToPublisherRequest,
        responseType: Events_Processing_EventHorizon_pb.EventHorizonPublisherToSubscriberResponse,
        requestSerialize: serialize_dolittle_runtime_events_processing_EventHorizonSubscriberToPublisherRequest,
        requestDeserialize: deserialize_dolittle_runtime_events_processing_EventHorizonSubscriberToPublisherRequest,
        responseSerialize: serialize_dolittle_runtime_events_processing_EventHorizonPublisherToSubscriberResponse,
        responseDeserialize: deserialize_dolittle_runtime_events_processing_EventHorizonPublisherToSubscriberResponse,
    },
};
exports.EventHorizonClient = grpc.makeGenericClientConstructor(EventHorizonService);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRIb3Jpem9uX2dycGNfcGIuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbIkV2ZW50cy5Qcm9jZXNzaW5nL0V2ZW50SG9yaXpvbl9ncnBjX3BiLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlDQUFpQztBQUVqQywwQkFBMEI7QUFDMUIsK0NBQStDO0FBQy9DLHFHQUFxRztBQUNyRyxFQUFFO0FBQ0YsWUFBWSxDQUFDO0FBQ2IsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzNCLElBQUksaUNBQWlDLEdBQUcsT0FBTyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7QUFDM0YsSUFBSSx3QkFBd0IsR0FBRyxPQUFPLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztBQUV6RSxTQUFTLHNGQUFzRixDQUFDLEdBQUc7SUFDakcsSUFBSSxDQUFDLENBQUMsR0FBRyxZQUFZLGlDQUFpQyxDQUFDLHlDQUF5QyxDQUFDLEVBQUU7UUFDakcsTUFBTSxJQUFJLEtBQUssQ0FBQyx3R0FBd0csQ0FBQyxDQUFDO0tBQzNIO0lBQ0QsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO0FBQzVDLENBQUM7QUFFRCxTQUFTLHdGQUF3RixDQUFDLFVBQVU7SUFDMUcsT0FBTyxpQ0FBaUMsQ0FBQyx5Q0FBeUMsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0FBQ25JLENBQUM7QUFFRCxTQUFTLHFGQUFxRixDQUFDLEdBQUc7SUFDaEcsSUFBSSxDQUFDLENBQUMsR0FBRyxZQUFZLGlDQUFpQyxDQUFDLHdDQUF3QyxDQUFDLEVBQUU7UUFDaEcsTUFBTSxJQUFJLEtBQUssQ0FBQyx1R0FBdUcsQ0FBQyxDQUFDO0tBQzFIO0lBQ0QsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO0FBQzVDLENBQUM7QUFFRCxTQUFTLHVGQUF1RixDQUFDLFVBQVU7SUFDekcsT0FBTyxpQ0FBaUMsQ0FBQyx3Q0FBd0MsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0FBQ2xJLENBQUM7QUFHRCxJQUFJLG1CQUFtQixHQUFHLE9BQU8sQ0FBQyxtQkFBbUIsR0FBRztJQUN0RCxTQUFTLEVBQUU7UUFDVCxJQUFJLEVBQUUsNERBQTREO1FBQ2xFLGFBQWEsRUFBRSxLQUFLO1FBQ3BCLGNBQWMsRUFBRSxJQUFJO1FBQ3BCLFdBQVcsRUFBRSxpQ0FBaUMsQ0FBQyx3Q0FBd0M7UUFDdkYsWUFBWSxFQUFFLGlDQUFpQyxDQUFDLHlDQUF5QztRQUN6RixnQkFBZ0IsRUFBRSxxRkFBcUY7UUFDdkcsa0JBQWtCLEVBQUUsdUZBQXVGO1FBQzNHLGlCQUFpQixFQUFFLHNGQUFzRjtRQUN6RyxtQkFBbUIsRUFBRSx3RkFBd0Y7S0FDOUc7Q0FDRixDQUFDO0FBRUYsT0FBTyxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gR0VORVJBVEVEIENPREUgLS0gRE8gTk9UIEVESVQhXG5cbi8vIE9yaWdpbmFsIGZpbGUgY29tbWVudHM6XG4vLyBDb3B5cmlnaHQgKGMpIERvbGl0dGxlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi5cbi8vXG4ndXNlIHN0cmljdCc7XG52YXIgZ3JwYyA9IHJlcXVpcmUoJ2dycGMnKTtcbnZhciBFdmVudHNfUHJvY2Vzc2luZ19FdmVudEhvcml6b25fcGIgPSByZXF1aXJlKCcuLi9FdmVudHMuUHJvY2Vzc2luZy9FdmVudEhvcml6b25fcGIuanMnKTtcbnZhciBFdmVudHNfQ29tbWl0dGVkRXZlbnRfcGIgPSByZXF1aXJlKCcuLi9FdmVudHMvQ29tbWl0dGVkRXZlbnRfcGIuanMnKTtcblxuZnVuY3Rpb24gc2VyaWFsaXplX2RvbGl0dGxlX3J1bnRpbWVfZXZlbnRzX3Byb2Nlc3NpbmdfRXZlbnRIb3Jpem9uUHVibGlzaGVyVG9TdWJzY3JpYmVyUmVzcG9uc2UoYXJnKSB7XG4gIGlmICghKGFyZyBpbnN0YW5jZW9mIEV2ZW50c19Qcm9jZXNzaW5nX0V2ZW50SG9yaXpvbl9wYi5FdmVudEhvcml6b25QdWJsaXNoZXJUb1N1YnNjcmliZXJSZXNwb25zZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGFyZ3VtZW50IG9mIHR5cGUgZG9saXR0bGUucnVudGltZS5ldmVudHMucHJvY2Vzc2luZy5FdmVudEhvcml6b25QdWJsaXNoZXJUb1N1YnNjcmliZXJSZXNwb25zZScpO1xuICB9XG4gIHJldHVybiBCdWZmZXIuZnJvbShhcmcuc2VyaWFsaXplQmluYXJ5KCkpO1xufVxuXG5mdW5jdGlvbiBkZXNlcmlhbGl6ZV9kb2xpdHRsZV9ydW50aW1lX2V2ZW50c19wcm9jZXNzaW5nX0V2ZW50SG9yaXpvblB1Ymxpc2hlclRvU3Vic2NyaWJlclJlc3BvbnNlKGJ1ZmZlcl9hcmcpIHtcbiAgcmV0dXJuIEV2ZW50c19Qcm9jZXNzaW5nX0V2ZW50SG9yaXpvbl9wYi5FdmVudEhvcml6b25QdWJsaXNoZXJUb1N1YnNjcmliZXJSZXNwb25zZS5kZXNlcmlhbGl6ZUJpbmFyeShuZXcgVWludDhBcnJheShidWZmZXJfYXJnKSk7XG59XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZV9kb2xpdHRsZV9ydW50aW1lX2V2ZW50c19wcm9jZXNzaW5nX0V2ZW50SG9yaXpvblN1YnNjcmliZXJUb1B1Ymxpc2hlclJlcXVlc3QoYXJnKSB7XG4gIGlmICghKGFyZyBpbnN0YW5jZW9mIEV2ZW50c19Qcm9jZXNzaW5nX0V2ZW50SG9yaXpvbl9wYi5FdmVudEhvcml6b25TdWJzY3JpYmVyVG9QdWJsaXNoZXJSZXF1ZXN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgYXJndW1lbnQgb2YgdHlwZSBkb2xpdHRsZS5ydW50aW1lLmV2ZW50cy5wcm9jZXNzaW5nLkV2ZW50SG9yaXpvblN1YnNjcmliZXJUb1B1Ymxpc2hlclJlcXVlc3QnKTtcbiAgfVxuICByZXR1cm4gQnVmZmVyLmZyb20oYXJnLnNlcmlhbGl6ZUJpbmFyeSgpKTtcbn1cblxuZnVuY3Rpb24gZGVzZXJpYWxpemVfZG9saXR0bGVfcnVudGltZV9ldmVudHNfcHJvY2Vzc2luZ19FdmVudEhvcml6b25TdWJzY3JpYmVyVG9QdWJsaXNoZXJSZXF1ZXN0KGJ1ZmZlcl9hcmcpIHtcbiAgcmV0dXJuIEV2ZW50c19Qcm9jZXNzaW5nX0V2ZW50SG9yaXpvbl9wYi5FdmVudEhvcml6b25TdWJzY3JpYmVyVG9QdWJsaXNoZXJSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5KG5ldyBVaW50OEFycmF5KGJ1ZmZlcl9hcmcpKTtcbn1cblxuXG52YXIgRXZlbnRIb3Jpem9uU2VydmljZSA9IGV4cG9ydHMuRXZlbnRIb3Jpem9uU2VydmljZSA9IHtcbiAgc3Vic2NyaWJlOiB7XG4gICAgcGF0aDogJy9kb2xpdHRsZS5ydW50aW1lLmV2ZW50cy5wcm9jZXNzaW5nLkV2ZW50SG9yaXpvbi9TdWJzY3JpYmUnLFxuICAgIHJlcXVlc3RTdHJlYW06IGZhbHNlLFxuICAgIHJlc3BvbnNlU3RyZWFtOiB0cnVlLFxuICAgIHJlcXVlc3RUeXBlOiBFdmVudHNfUHJvY2Vzc2luZ19FdmVudEhvcml6b25fcGIuRXZlbnRIb3Jpem9uU3Vic2NyaWJlclRvUHVibGlzaGVyUmVxdWVzdCxcbiAgICByZXNwb25zZVR5cGU6IEV2ZW50c19Qcm9jZXNzaW5nX0V2ZW50SG9yaXpvbl9wYi5FdmVudEhvcml6b25QdWJsaXNoZXJUb1N1YnNjcmliZXJSZXNwb25zZSxcbiAgICByZXF1ZXN0U2VyaWFsaXplOiBzZXJpYWxpemVfZG9saXR0bGVfcnVudGltZV9ldmVudHNfcHJvY2Vzc2luZ19FdmVudEhvcml6b25TdWJzY3JpYmVyVG9QdWJsaXNoZXJSZXF1ZXN0LFxuICAgIHJlcXVlc3REZXNlcmlhbGl6ZTogZGVzZXJpYWxpemVfZG9saXR0bGVfcnVudGltZV9ldmVudHNfcHJvY2Vzc2luZ19FdmVudEhvcml6b25TdWJzY3JpYmVyVG9QdWJsaXNoZXJSZXF1ZXN0LFxuICAgIHJlc3BvbnNlU2VyaWFsaXplOiBzZXJpYWxpemVfZG9saXR0bGVfcnVudGltZV9ldmVudHNfcHJvY2Vzc2luZ19FdmVudEhvcml6b25QdWJsaXNoZXJUb1N1YnNjcmliZXJSZXNwb25zZSxcbiAgICByZXNwb25zZURlc2VyaWFsaXplOiBkZXNlcmlhbGl6ZV9kb2xpdHRsZV9ydW50aW1lX2V2ZW50c19wcm9jZXNzaW5nX0V2ZW50SG9yaXpvblB1Ymxpc2hlclRvU3Vic2NyaWJlclJlc3BvbnNlLFxuICB9LFxufTtcblxuZXhwb3J0cy5FdmVudEhvcml6b25DbGllbnQgPSBncnBjLm1ha2VHZW5lcmljQ2xpZW50Q29uc3RydWN0b3IoRXZlbnRIb3Jpem9uU2VydmljZSk7XG4iXX0=