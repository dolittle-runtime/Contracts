// GENERATED CODE -- DO NOT EDIT!
// Original file comments:
// Copyright (c) Dolittle. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
//
'use strict';
var grpc = require('grpc');
var Events_Processing_Filters_pb = require('../Events.Processing/Filters_pb.js');
var Events_CommittedEvent_pb = require('../Events/CommittedEvent_pb.js');
function serialize_dolittle_runtime_events_processing_FilterClientToRuntimeResponse(arg) {
    if (!(arg instanceof Events_Processing_Filters_pb.FilterClientToRuntimeResponse)) {
        throw new Error('Expected argument of type dolittle.runtime.events.processing.FilterClientToRuntimeResponse');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dolittle_runtime_events_processing_FilterClientToRuntimeResponse(buffer_arg) {
    return Events_Processing_Filters_pb.FilterClientToRuntimeResponse.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dolittle_runtime_events_processing_FilterRuntimeToClientRequest(arg) {
    if (!(arg instanceof Events_Processing_Filters_pb.FilterRuntimeToClientRequest)) {
        throw new Error('Expected argument of type dolittle.runtime.events.processing.FilterRuntimeToClientRequest');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dolittle_runtime_events_processing_FilterRuntimeToClientRequest(buffer_arg) {
    return Events_Processing_Filters_pb.FilterRuntimeToClientRequest.deserializeBinary(new Uint8Array(buffer_arg));
}
var FiltersService = exports.FiltersService = {
    connect: {
        path: '/dolittle.runtime.events.processing.Filters/Connect',
        requestStream: true,
        responseStream: true,
        requestType: Events_Processing_Filters_pb.FilterClientToRuntimeResponse,
        responseType: Events_Processing_Filters_pb.FilterRuntimeToClientRequest,
        requestSerialize: serialize_dolittle_runtime_events_processing_FilterClientToRuntimeResponse,
        requestDeserialize: deserialize_dolittle_runtime_events_processing_FilterClientToRuntimeResponse,
        responseSerialize: serialize_dolittle_runtime_events_processing_FilterRuntimeToClientRequest,
        responseDeserialize: deserialize_dolittle_runtime_events_processing_FilterRuntimeToClientRequest,
    },
};
exports.FiltersClient = grpc.makeGenericClientConstructor(FiltersService);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmlsdGVyc19ncnBjX3BiLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJFdmVudHMuUHJvY2Vzc2luZy9GaWx0ZXJzX2dycGNfcGIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUNBQWlDO0FBRWpDLDBCQUEwQjtBQUMxQiwrQ0FBK0M7QUFDL0MscUdBQXFHO0FBQ3JHLEVBQUU7QUFDRixZQUFZLENBQUM7QUFDYixJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDM0IsSUFBSSw0QkFBNEIsR0FBRyxPQUFPLENBQUMsb0NBQW9DLENBQUMsQ0FBQztBQUNqRixJQUFJLHdCQUF3QixHQUFHLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0FBRXpFLFNBQVMsMEVBQTBFLENBQUMsR0FBRztJQUNyRixJQUFJLENBQUMsQ0FBQyxHQUFHLFlBQVksNEJBQTRCLENBQUMsNkJBQTZCLENBQUMsRUFBRTtRQUNoRixNQUFNLElBQUksS0FBSyxDQUFDLDRGQUE0RixDQUFDLENBQUM7S0FDL0c7SUFDRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7QUFDNUMsQ0FBQztBQUVELFNBQVMsNEVBQTRFLENBQUMsVUFBVTtJQUM5RixPQUFPLDRCQUE0QixDQUFDLDZCQUE2QixDQUFDLGlCQUFpQixDQUFDLElBQUksVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7QUFDbEgsQ0FBQztBQUVELFNBQVMseUVBQXlFLENBQUMsR0FBRztJQUNwRixJQUFJLENBQUMsQ0FBQyxHQUFHLFlBQVksNEJBQTRCLENBQUMsNEJBQTRCLENBQUMsRUFBRTtRQUMvRSxNQUFNLElBQUksS0FBSyxDQUFDLDJGQUEyRixDQUFDLENBQUM7S0FDOUc7SUFDRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7QUFDNUMsQ0FBQztBQUVELFNBQVMsMkVBQTJFLENBQUMsVUFBVTtJQUM3RixPQUFPLDRCQUE0QixDQUFDLDRCQUE0QixDQUFDLGlCQUFpQixDQUFDLElBQUksVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7QUFDakgsQ0FBQztBQUdELElBQUksY0FBYyxHQUFHLE9BQU8sQ0FBQyxjQUFjLEdBQUc7SUFDNUMsT0FBTyxFQUFFO1FBQ1AsSUFBSSxFQUFFLHFEQUFxRDtRQUMzRCxhQUFhLEVBQUUsSUFBSTtRQUNuQixjQUFjLEVBQUUsSUFBSTtRQUNwQixXQUFXLEVBQUUsNEJBQTRCLENBQUMsNkJBQTZCO1FBQ3ZFLFlBQVksRUFBRSw0QkFBNEIsQ0FBQyw0QkFBNEI7UUFDdkUsZ0JBQWdCLEVBQUUsMEVBQTBFO1FBQzVGLGtCQUFrQixFQUFFLDRFQUE0RTtRQUNoRyxpQkFBaUIsRUFBRSx5RUFBeUU7UUFDNUYsbUJBQW1CLEVBQUUsMkVBQTJFO0tBQ2pHO0NBQ0YsQ0FBQztBQUVGLE9BQU8sQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLDRCQUE0QixDQUFDLGNBQWMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gR0VORVJBVEVEIENPREUgLS0gRE8gTk9UIEVESVQhXG5cbi8vIE9yaWdpbmFsIGZpbGUgY29tbWVudHM6XG4vLyBDb3B5cmlnaHQgKGMpIERvbGl0dGxlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi5cbi8vXG4ndXNlIHN0cmljdCc7XG52YXIgZ3JwYyA9IHJlcXVpcmUoJ2dycGMnKTtcbnZhciBFdmVudHNfUHJvY2Vzc2luZ19GaWx0ZXJzX3BiID0gcmVxdWlyZSgnLi4vRXZlbnRzLlByb2Nlc3NpbmcvRmlsdGVyc19wYi5qcycpO1xudmFyIEV2ZW50c19Db21taXR0ZWRFdmVudF9wYiA9IHJlcXVpcmUoJy4uL0V2ZW50cy9Db21taXR0ZWRFdmVudF9wYi5qcycpO1xuXG5mdW5jdGlvbiBzZXJpYWxpemVfZG9saXR0bGVfcnVudGltZV9ldmVudHNfcHJvY2Vzc2luZ19GaWx0ZXJDbGllbnRUb1J1bnRpbWVSZXNwb25zZShhcmcpIHtcbiAgaWYgKCEoYXJnIGluc3RhbmNlb2YgRXZlbnRzX1Byb2Nlc3NpbmdfRmlsdGVyc19wYi5GaWx0ZXJDbGllbnRUb1J1bnRpbWVSZXNwb25zZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGFyZ3VtZW50IG9mIHR5cGUgZG9saXR0bGUucnVudGltZS5ldmVudHMucHJvY2Vzc2luZy5GaWx0ZXJDbGllbnRUb1J1bnRpbWVSZXNwb25zZScpO1xuICB9XG4gIHJldHVybiBCdWZmZXIuZnJvbShhcmcuc2VyaWFsaXplQmluYXJ5KCkpO1xufVxuXG5mdW5jdGlvbiBkZXNlcmlhbGl6ZV9kb2xpdHRsZV9ydW50aW1lX2V2ZW50c19wcm9jZXNzaW5nX0ZpbHRlckNsaWVudFRvUnVudGltZVJlc3BvbnNlKGJ1ZmZlcl9hcmcpIHtcbiAgcmV0dXJuIEV2ZW50c19Qcm9jZXNzaW5nX0ZpbHRlcnNfcGIuRmlsdGVyQ2xpZW50VG9SdW50aW1lUmVzcG9uc2UuZGVzZXJpYWxpemVCaW5hcnkobmV3IFVpbnQ4QXJyYXkoYnVmZmVyX2FyZykpO1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVfZG9saXR0bGVfcnVudGltZV9ldmVudHNfcHJvY2Vzc2luZ19GaWx0ZXJSdW50aW1lVG9DbGllbnRSZXF1ZXN0KGFyZykge1xuICBpZiAoIShhcmcgaW5zdGFuY2VvZiBFdmVudHNfUHJvY2Vzc2luZ19GaWx0ZXJzX3BiLkZpbHRlclJ1bnRpbWVUb0NsaWVudFJlcXVlc3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBhcmd1bWVudCBvZiB0eXBlIGRvbGl0dGxlLnJ1bnRpbWUuZXZlbnRzLnByb2Nlc3NpbmcuRmlsdGVyUnVudGltZVRvQ2xpZW50UmVxdWVzdCcpO1xuICB9XG4gIHJldHVybiBCdWZmZXIuZnJvbShhcmcuc2VyaWFsaXplQmluYXJ5KCkpO1xufVxuXG5mdW5jdGlvbiBkZXNlcmlhbGl6ZV9kb2xpdHRsZV9ydW50aW1lX2V2ZW50c19wcm9jZXNzaW5nX0ZpbHRlclJ1bnRpbWVUb0NsaWVudFJlcXVlc3QoYnVmZmVyX2FyZykge1xuICByZXR1cm4gRXZlbnRzX1Byb2Nlc3NpbmdfRmlsdGVyc19wYi5GaWx0ZXJSdW50aW1lVG9DbGllbnRSZXF1ZXN0LmRlc2VyaWFsaXplQmluYXJ5KG5ldyBVaW50OEFycmF5KGJ1ZmZlcl9hcmcpKTtcbn1cblxuXG52YXIgRmlsdGVyc1NlcnZpY2UgPSBleHBvcnRzLkZpbHRlcnNTZXJ2aWNlID0ge1xuICBjb25uZWN0OiB7XG4gICAgcGF0aDogJy9kb2xpdHRsZS5ydW50aW1lLmV2ZW50cy5wcm9jZXNzaW5nLkZpbHRlcnMvQ29ubmVjdCcsXG4gICAgcmVxdWVzdFN0cmVhbTogdHJ1ZSxcbiAgICByZXNwb25zZVN0cmVhbTogdHJ1ZSxcbiAgICByZXF1ZXN0VHlwZTogRXZlbnRzX1Byb2Nlc3NpbmdfRmlsdGVyc19wYi5GaWx0ZXJDbGllbnRUb1J1bnRpbWVSZXNwb25zZSxcbiAgICByZXNwb25zZVR5cGU6IEV2ZW50c19Qcm9jZXNzaW5nX0ZpbHRlcnNfcGIuRmlsdGVyUnVudGltZVRvQ2xpZW50UmVxdWVzdCxcbiAgICByZXF1ZXN0U2VyaWFsaXplOiBzZXJpYWxpemVfZG9saXR0bGVfcnVudGltZV9ldmVudHNfcHJvY2Vzc2luZ19GaWx0ZXJDbGllbnRUb1J1bnRpbWVSZXNwb25zZSxcbiAgICByZXF1ZXN0RGVzZXJpYWxpemU6IGRlc2VyaWFsaXplX2RvbGl0dGxlX3J1bnRpbWVfZXZlbnRzX3Byb2Nlc3NpbmdfRmlsdGVyQ2xpZW50VG9SdW50aW1lUmVzcG9uc2UsXG4gICAgcmVzcG9uc2VTZXJpYWxpemU6IHNlcmlhbGl6ZV9kb2xpdHRsZV9ydW50aW1lX2V2ZW50c19wcm9jZXNzaW5nX0ZpbHRlclJ1bnRpbWVUb0NsaWVudFJlcXVlc3QsXG4gICAgcmVzcG9uc2VEZXNlcmlhbGl6ZTogZGVzZXJpYWxpemVfZG9saXR0bGVfcnVudGltZV9ldmVudHNfcHJvY2Vzc2luZ19GaWx0ZXJSdW50aW1lVG9DbGllbnRSZXF1ZXN0LFxuICB9LFxufTtcblxuZXhwb3J0cy5GaWx0ZXJzQ2xpZW50ID0gZ3JwYy5tYWtlR2VuZXJpY0NsaWVudENvbnN0cnVjdG9yKEZpbHRlcnNTZXJ2aWNlKTtcbiJdfQ==