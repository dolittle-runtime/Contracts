// GENERATED CODE -- DO NOT EDIT!
// Original file comments:
// Copyright (c) Dolittle. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
//
'use strict';
var grpc = require('grpc');
var Events_Processing_EventHandlers_pb = require('../Events.Processing/EventHandlers_pb.js');
var Artifacts_Artifact_pb = require('../Artifacts/Artifact_pb.js');
var Events_CommittedEvent_pb = require('../Events/CommittedEvent_pb.js');
function serialize_dolittle_runtime_events_processing_EventHandlerClientToRuntimeResponse(arg) {
    if (!(arg instanceof Events_Processing_EventHandlers_pb.EventHandlerClientToRuntimeResponse)) {
        throw new Error('Expected argument of type dolittle.runtime.events.processing.EventHandlerClientToRuntimeResponse');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dolittle_runtime_events_processing_EventHandlerClientToRuntimeResponse(buffer_arg) {
    return Events_Processing_EventHandlers_pb.EventHandlerClientToRuntimeResponse.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dolittle_runtime_events_processing_EventHandlerRuntimeToClientRequest(arg) {
    if (!(arg instanceof Events_Processing_EventHandlers_pb.EventHandlerRuntimeToClientRequest)) {
        throw new Error('Expected argument of type dolittle.runtime.events.processing.EventHandlerRuntimeToClientRequest');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dolittle_runtime_events_processing_EventHandlerRuntimeToClientRequest(buffer_arg) {
    return Events_Processing_EventHandlers_pb.EventHandlerRuntimeToClientRequest.deserializeBinary(new Uint8Array(buffer_arg));
}
var EventHandlersService = exports.EventHandlersService = {
    connect: {
        path: '/dolittle.runtime.events.processing.EventHandlers/Connect',
        requestStream: true,
        responseStream: true,
        requestType: Events_Processing_EventHandlers_pb.EventHandlerClientToRuntimeResponse,
        responseType: Events_Processing_EventHandlers_pb.EventHandlerRuntimeToClientRequest,
        requestSerialize: serialize_dolittle_runtime_events_processing_EventHandlerClientToRuntimeResponse,
        requestDeserialize: deserialize_dolittle_runtime_events_processing_EventHandlerClientToRuntimeResponse,
        responseSerialize: serialize_dolittle_runtime_events_processing_EventHandlerRuntimeToClientRequest,
        responseDeserialize: deserialize_dolittle_runtime_events_processing_EventHandlerRuntimeToClientRequest,
    },
};
exports.EventHandlersClient = grpc.makeGenericClientConstructor(EventHandlersService);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRIYW5kbGVyc19ncnBjX3BiLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJFdmVudHMuUHJvY2Vzc2luZy9FdmVudEhhbmRsZXJzX2dycGNfcGIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUNBQWlDO0FBRWpDLDBCQUEwQjtBQUMxQiwrQ0FBK0M7QUFDL0MscUdBQXFHO0FBQ3JHLEVBQUU7QUFDRixZQUFZLENBQUM7QUFDYixJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDM0IsSUFBSSxrQ0FBa0MsR0FBRyxPQUFPLENBQUMsMENBQTBDLENBQUMsQ0FBQztBQUM3RixJQUFJLHFCQUFxQixHQUFHLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0FBQ25FLElBQUksd0JBQXdCLEdBQUcsT0FBTyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7QUFFekUsU0FBUyxnRkFBZ0YsQ0FBQyxHQUFHO0lBQzNGLElBQUksQ0FBQyxDQUFDLEdBQUcsWUFBWSxrQ0FBa0MsQ0FBQyxtQ0FBbUMsQ0FBQyxFQUFFO1FBQzVGLE1BQU0sSUFBSSxLQUFLLENBQUMsa0dBQWtHLENBQUMsQ0FBQztLQUNySDtJQUNELE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQztBQUM1QyxDQUFDO0FBRUQsU0FBUyxrRkFBa0YsQ0FBQyxVQUFVO0lBQ3BHLE9BQU8sa0NBQWtDLENBQUMsbUNBQW1DLENBQUMsaUJBQWlCLENBQUMsSUFBSSxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztBQUM5SCxDQUFDO0FBRUQsU0FBUywrRUFBK0UsQ0FBQyxHQUFHO0lBQzFGLElBQUksQ0FBQyxDQUFDLEdBQUcsWUFBWSxrQ0FBa0MsQ0FBQyxrQ0FBa0MsQ0FBQyxFQUFFO1FBQzNGLE1BQU0sSUFBSSxLQUFLLENBQUMsaUdBQWlHLENBQUMsQ0FBQztLQUNwSDtJQUNELE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQztBQUM1QyxDQUFDO0FBRUQsU0FBUyxpRkFBaUYsQ0FBQyxVQUFVO0lBQ25HLE9BQU8sa0NBQWtDLENBQUMsa0NBQWtDLENBQUMsaUJBQWlCLENBQUMsSUFBSSxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztBQUM3SCxDQUFDO0FBR0QsSUFBSSxvQkFBb0IsR0FBRyxPQUFPLENBQUMsb0JBQW9CLEdBQUc7SUFDeEQsT0FBTyxFQUFFO1FBQ1AsSUFBSSxFQUFFLDJEQUEyRDtRQUNqRSxhQUFhLEVBQUUsSUFBSTtRQUNuQixjQUFjLEVBQUUsSUFBSTtRQUNwQixXQUFXLEVBQUUsa0NBQWtDLENBQUMsbUNBQW1DO1FBQ25GLFlBQVksRUFBRSxrQ0FBa0MsQ0FBQyxrQ0FBa0M7UUFDbkYsZ0JBQWdCLEVBQUUsZ0ZBQWdGO1FBQ2xHLGtCQUFrQixFQUFFLGtGQUFrRjtRQUN0RyxpQkFBaUIsRUFBRSwrRUFBK0U7UUFDbEcsbUJBQW1CLEVBQUUsaUZBQWlGO0tBQ3ZHO0NBQ0YsQ0FBQztBQUVGLE9BQU8sQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsNEJBQTRCLENBQUMsb0JBQW9CLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEdFTkVSQVRFRCBDT0RFIC0tIERPIE5PVCBFRElUIVxuXG4vLyBPcmlnaW5hbCBmaWxlIGNvbW1lbnRzOlxuLy8gQ29weXJpZ2h0IChjKSBEb2xpdHRsZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4gU2VlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcHJvamVjdCByb290IGZvciBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4vL1xuJ3VzZSBzdHJpY3QnO1xudmFyIGdycGMgPSByZXF1aXJlKCdncnBjJyk7XG52YXIgRXZlbnRzX1Byb2Nlc3NpbmdfRXZlbnRIYW5kbGVyc19wYiA9IHJlcXVpcmUoJy4uL0V2ZW50cy5Qcm9jZXNzaW5nL0V2ZW50SGFuZGxlcnNfcGIuanMnKTtcbnZhciBBcnRpZmFjdHNfQXJ0aWZhY3RfcGIgPSByZXF1aXJlKCcuLi9BcnRpZmFjdHMvQXJ0aWZhY3RfcGIuanMnKTtcbnZhciBFdmVudHNfQ29tbWl0dGVkRXZlbnRfcGIgPSByZXF1aXJlKCcuLi9FdmVudHMvQ29tbWl0dGVkRXZlbnRfcGIuanMnKTtcblxuZnVuY3Rpb24gc2VyaWFsaXplX2RvbGl0dGxlX3J1bnRpbWVfZXZlbnRzX3Byb2Nlc3NpbmdfRXZlbnRIYW5kbGVyQ2xpZW50VG9SdW50aW1lUmVzcG9uc2UoYXJnKSB7XG4gIGlmICghKGFyZyBpbnN0YW5jZW9mIEV2ZW50c19Qcm9jZXNzaW5nX0V2ZW50SGFuZGxlcnNfcGIuRXZlbnRIYW5kbGVyQ2xpZW50VG9SdW50aW1lUmVzcG9uc2UpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBhcmd1bWVudCBvZiB0eXBlIGRvbGl0dGxlLnJ1bnRpbWUuZXZlbnRzLnByb2Nlc3NpbmcuRXZlbnRIYW5kbGVyQ2xpZW50VG9SdW50aW1lUmVzcG9uc2UnKTtcbiAgfVxuICByZXR1cm4gQnVmZmVyLmZyb20oYXJnLnNlcmlhbGl6ZUJpbmFyeSgpKTtcbn1cblxuZnVuY3Rpb24gZGVzZXJpYWxpemVfZG9saXR0bGVfcnVudGltZV9ldmVudHNfcHJvY2Vzc2luZ19FdmVudEhhbmRsZXJDbGllbnRUb1J1bnRpbWVSZXNwb25zZShidWZmZXJfYXJnKSB7XG4gIHJldHVybiBFdmVudHNfUHJvY2Vzc2luZ19FdmVudEhhbmRsZXJzX3BiLkV2ZW50SGFuZGxlckNsaWVudFRvUnVudGltZVJlc3BvbnNlLmRlc2VyaWFsaXplQmluYXJ5KG5ldyBVaW50OEFycmF5KGJ1ZmZlcl9hcmcpKTtcbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplX2RvbGl0dGxlX3J1bnRpbWVfZXZlbnRzX3Byb2Nlc3NpbmdfRXZlbnRIYW5kbGVyUnVudGltZVRvQ2xpZW50UmVxdWVzdChhcmcpIHtcbiAgaWYgKCEoYXJnIGluc3RhbmNlb2YgRXZlbnRzX1Byb2Nlc3NpbmdfRXZlbnRIYW5kbGVyc19wYi5FdmVudEhhbmRsZXJSdW50aW1lVG9DbGllbnRSZXF1ZXN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgYXJndW1lbnQgb2YgdHlwZSBkb2xpdHRsZS5ydW50aW1lLmV2ZW50cy5wcm9jZXNzaW5nLkV2ZW50SGFuZGxlclJ1bnRpbWVUb0NsaWVudFJlcXVlc3QnKTtcbiAgfVxuICByZXR1cm4gQnVmZmVyLmZyb20oYXJnLnNlcmlhbGl6ZUJpbmFyeSgpKTtcbn1cblxuZnVuY3Rpb24gZGVzZXJpYWxpemVfZG9saXR0bGVfcnVudGltZV9ldmVudHNfcHJvY2Vzc2luZ19FdmVudEhhbmRsZXJSdW50aW1lVG9DbGllbnRSZXF1ZXN0KGJ1ZmZlcl9hcmcpIHtcbiAgcmV0dXJuIEV2ZW50c19Qcm9jZXNzaW5nX0V2ZW50SGFuZGxlcnNfcGIuRXZlbnRIYW5kbGVyUnVudGltZVRvQ2xpZW50UmVxdWVzdC5kZXNlcmlhbGl6ZUJpbmFyeShuZXcgVWludDhBcnJheShidWZmZXJfYXJnKSk7XG59XG5cblxudmFyIEV2ZW50SGFuZGxlcnNTZXJ2aWNlID0gZXhwb3J0cy5FdmVudEhhbmRsZXJzU2VydmljZSA9IHtcbiAgY29ubmVjdDoge1xuICAgIHBhdGg6ICcvZG9saXR0bGUucnVudGltZS5ldmVudHMucHJvY2Vzc2luZy5FdmVudEhhbmRsZXJzL0Nvbm5lY3QnLFxuICAgIHJlcXVlc3RTdHJlYW06IHRydWUsXG4gICAgcmVzcG9uc2VTdHJlYW06IHRydWUsXG4gICAgcmVxdWVzdFR5cGU6IEV2ZW50c19Qcm9jZXNzaW5nX0V2ZW50SGFuZGxlcnNfcGIuRXZlbnRIYW5kbGVyQ2xpZW50VG9SdW50aW1lUmVzcG9uc2UsXG4gICAgcmVzcG9uc2VUeXBlOiBFdmVudHNfUHJvY2Vzc2luZ19FdmVudEhhbmRsZXJzX3BiLkV2ZW50SGFuZGxlclJ1bnRpbWVUb0NsaWVudFJlcXVlc3QsXG4gICAgcmVxdWVzdFNlcmlhbGl6ZTogc2VyaWFsaXplX2RvbGl0dGxlX3J1bnRpbWVfZXZlbnRzX3Byb2Nlc3NpbmdfRXZlbnRIYW5kbGVyQ2xpZW50VG9SdW50aW1lUmVzcG9uc2UsXG4gICAgcmVxdWVzdERlc2VyaWFsaXplOiBkZXNlcmlhbGl6ZV9kb2xpdHRsZV9ydW50aW1lX2V2ZW50c19wcm9jZXNzaW5nX0V2ZW50SGFuZGxlckNsaWVudFRvUnVudGltZVJlc3BvbnNlLFxuICAgIHJlc3BvbnNlU2VyaWFsaXplOiBzZXJpYWxpemVfZG9saXR0bGVfcnVudGltZV9ldmVudHNfcHJvY2Vzc2luZ19FdmVudEhhbmRsZXJSdW50aW1lVG9DbGllbnRSZXF1ZXN0LFxuICAgIHJlc3BvbnNlRGVzZXJpYWxpemU6IGRlc2VyaWFsaXplX2RvbGl0dGxlX3J1bnRpbWVfZXZlbnRzX3Byb2Nlc3NpbmdfRXZlbnRIYW5kbGVyUnVudGltZVRvQ2xpZW50UmVxdWVzdCxcbiAgfSxcbn07XG5cbmV4cG9ydHMuRXZlbnRIYW5kbGVyc0NsaWVudCA9IGdycGMubWFrZUdlbmVyaWNDbGllbnRDb25zdHJ1Y3RvcihFdmVudEhhbmRsZXJzU2VydmljZSk7XG4iXX0=