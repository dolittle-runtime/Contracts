"use strict";
// package: dolittle.runtime.heads
// file: Heads/Heads.proto
var Heads_Heads_pb = require("../Heads/Heads_pb");
var Heads_HeadInfo_pb = require("../Heads/HeadInfo_pb");
var google_protobuf_empty_pb = require("google-protobuf/google/protobuf/empty_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;
var Heads = (function () {
    function Heads() { }
    Heads.serviceName = "dolittle.runtime.heads.Heads";
    return Heads;
}());
Heads.Connect = {
    methodName: "Connect",
    service: Heads,
    requestStream: false,
    responseStream: true,
    requestType: Heads_HeadInfo_pb.HeadInfo,
    responseType: google_protobuf_empty_pb.Empty
};
exports.Heads = Heads;
function HeadsClient(serviceHost, options) {
    this.serviceHost = serviceHost;
    this.options = options || {};
}
HeadsClient.prototype.connect = function connect(requestMessage, metadata) {
    var listeners = {
        data: [],
        end: [],
        status: []
    };
    var client = grpc.invoke(Heads.Connect, {
        request: requestMessage,
        host: this.serviceHost,
        metadata: metadata,
        transport: this.options.transport,
        debug: this.options.debug,
        onMessage: function (responseMessage) {
            listeners.data.forEach(function (handler) {
                handler(responseMessage);
            });
        },
        onEnd: function (status, statusMessage, trailers) {
            listeners.status.forEach(function (handler) {
                handler({ code: status, details: statusMessage, metadata: trailers });
            });
            listeners.end.forEach(function (handler) {
                handler({ code: status, details: statusMessage, metadata: trailers });
            });
            listeners = null;
        }
    });
    return {
        on: function (type, handler) {
            listeners[type].push(handler);
            return this;
        },
        cancel: function () {
            listeners = null;
            client.close();
        }
    };
};
exports.HeadsClient = HeadsClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGVhZHNfcGJfc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsiSGVhZHMvSGVhZHNfcGJfc2VydmljZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsa0NBQWtDO0FBQ2xDLDBCQUEwQjtBQUUxQixJQUFJLGNBQWMsR0FBRyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUNsRCxJQUFJLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBQ3hELElBQUksd0JBQXdCLEdBQUcsT0FBTyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7QUFDbkYsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLDBCQUEwQixDQUFDLENBQUMsSUFBSSxDQUFDO0FBRXBELElBQUksS0FBSyxHQUFHLENBQUM7SUFDWCxTQUFTLEtBQUssS0FBSSxDQUFDO0lBQ25CLEtBQUssQ0FBQyxXQUFXLEdBQUcsOEJBQThCLENBQUM7SUFDbkQsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRUwsS0FBSyxDQUFDLE9BQU8sR0FBRztJQUNkLFVBQVUsRUFBRSxTQUFTO0lBQ3JCLE9BQU8sRUFBRSxLQUFLO0lBQ2QsYUFBYSxFQUFFLEtBQUs7SUFDcEIsY0FBYyxFQUFFLElBQUk7SUFDcEIsV0FBVyxFQUFFLGlCQUFpQixDQUFDLFFBQVE7SUFDdkMsWUFBWSxFQUFFLHdCQUF3QixDQUFDLEtBQUs7Q0FDN0MsQ0FBQztBQUVGLE9BQU8sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBRXRCLFNBQVMsV0FBVyxDQUFDLFdBQVcsRUFBRSxPQUFPO0lBQ3ZDLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0lBQy9CLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxJQUFJLEVBQUUsQ0FBQztBQUMvQixDQUFDO0FBRUQsV0FBVyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUcsU0FBUyxPQUFPLENBQUMsY0FBYyxFQUFFLFFBQVE7SUFDdkUsSUFBSSxTQUFTLEdBQUc7UUFDZCxJQUFJLEVBQUUsRUFBRTtRQUNSLEdBQUcsRUFBRSxFQUFFO1FBQ1AsTUFBTSxFQUFFLEVBQUU7S0FDWCxDQUFDO0lBQ0YsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFO1FBQ3RDLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLElBQUksRUFBRSxJQUFJLENBQUMsV0FBVztRQUN0QixRQUFRLEVBQUUsUUFBUTtRQUNsQixTQUFTLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTO1FBQ2pDLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUs7UUFDekIsU0FBUyxFQUFFLFVBQVUsZUFBZTtZQUNsQyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLE9BQU87Z0JBQ3RDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUMzQixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUM7UUFDRCxLQUFLLEVBQUUsVUFBVSxNQUFNLEVBQUUsYUFBYSxFQUFFLFFBQVE7WUFDOUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxPQUFPO2dCQUN4QyxPQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7WUFDeEUsQ0FBQyxDQUFDLENBQUM7WUFDSCxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxVQUFVLE9BQU87Z0JBQ3JDLE9BQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUN4RSxDQUFDLENBQUMsQ0FBQztZQUNILFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDbkIsQ0FBQztLQUNGLENBQUMsQ0FBQztJQUNILE9BQU87UUFDTCxFQUFFLEVBQUUsVUFBVSxJQUFJLEVBQUUsT0FBTztZQUN6QixTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzlCLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUNELE1BQU0sRUFBRTtZQUNOLFNBQVMsR0FBRyxJQUFJLENBQUM7WUFDakIsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2pCLENBQUM7S0FDRixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsT0FBTyxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBwYWNrYWdlOiBkb2xpdHRsZS5ydW50aW1lLmhlYWRzXG4vLyBmaWxlOiBIZWFkcy9IZWFkcy5wcm90b1xuXG52YXIgSGVhZHNfSGVhZHNfcGIgPSByZXF1aXJlKFwiLi4vSGVhZHMvSGVhZHNfcGJcIik7XG52YXIgSGVhZHNfSGVhZEluZm9fcGIgPSByZXF1aXJlKFwiLi4vSGVhZHMvSGVhZEluZm9fcGJcIik7XG52YXIgZ29vZ2xlX3Byb3RvYnVmX2VtcHR5X3BiID0gcmVxdWlyZShcImdvb2dsZS1wcm90b2J1Zi9nb29nbGUvcHJvdG9idWYvZW1wdHlfcGJcIik7XG52YXIgZ3JwYyA9IHJlcXVpcmUoXCJAaW1wcm9iYWJsZS1lbmcvZ3JwYy13ZWJcIikuZ3JwYztcblxudmFyIEhlYWRzID0gKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gSGVhZHMoKSB7fVxuICBIZWFkcy5zZXJ2aWNlTmFtZSA9IFwiZG9saXR0bGUucnVudGltZS5oZWFkcy5IZWFkc1wiO1xuICByZXR1cm4gSGVhZHM7XG59KCkpO1xuXG5IZWFkcy5Db25uZWN0ID0ge1xuICBtZXRob2ROYW1lOiBcIkNvbm5lY3RcIixcbiAgc2VydmljZTogSGVhZHMsXG4gIHJlcXVlc3RTdHJlYW06IGZhbHNlLFxuICByZXNwb25zZVN0cmVhbTogdHJ1ZSxcbiAgcmVxdWVzdFR5cGU6IEhlYWRzX0hlYWRJbmZvX3BiLkhlYWRJbmZvLFxuICByZXNwb25zZVR5cGU6IGdvb2dsZV9wcm90b2J1Zl9lbXB0eV9wYi5FbXB0eVxufTtcblxuZXhwb3J0cy5IZWFkcyA9IEhlYWRzO1xuXG5mdW5jdGlvbiBIZWFkc0NsaWVudChzZXJ2aWNlSG9zdCwgb3B0aW9ucykge1xuICB0aGlzLnNlcnZpY2VIb3N0ID0gc2VydmljZUhvc3Q7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG59XG5cbkhlYWRzQ2xpZW50LnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gY29ubmVjdChyZXF1ZXN0TWVzc2FnZSwgbWV0YWRhdGEpIHtcbiAgdmFyIGxpc3RlbmVycyA9IHtcbiAgICBkYXRhOiBbXSxcbiAgICBlbmQ6IFtdLFxuICAgIHN0YXR1czogW11cbiAgfTtcbiAgdmFyIGNsaWVudCA9IGdycGMuaW52b2tlKEhlYWRzLkNvbm5lY3QsIHtcbiAgICByZXF1ZXN0OiByZXF1ZXN0TWVzc2FnZSxcbiAgICBob3N0OiB0aGlzLnNlcnZpY2VIb3N0LFxuICAgIG1ldGFkYXRhOiBtZXRhZGF0YSxcbiAgICB0cmFuc3BvcnQ6IHRoaXMub3B0aW9ucy50cmFuc3BvcnQsXG4gICAgZGVidWc6IHRoaXMub3B0aW9ucy5kZWJ1ZyxcbiAgICBvbk1lc3NhZ2U6IGZ1bmN0aW9uIChyZXNwb25zZU1lc3NhZ2UpIHtcbiAgICAgIGxpc3RlbmVycy5kYXRhLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgaGFuZGxlcihyZXNwb25zZU1lc3NhZ2UpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBvbkVuZDogZnVuY3Rpb24gKHN0YXR1cywgc3RhdHVzTWVzc2FnZSwgdHJhaWxlcnMpIHtcbiAgICAgIGxpc3RlbmVycy5zdGF0dXMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICBoYW5kbGVyKHsgY29kZTogc3RhdHVzLCBkZXRhaWxzOiBzdGF0dXNNZXNzYWdlLCBtZXRhZGF0YTogdHJhaWxlcnMgfSk7XG4gICAgICB9KTtcbiAgICAgIGxpc3RlbmVycy5lbmQuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICBoYW5kbGVyKHsgY29kZTogc3RhdHVzLCBkZXRhaWxzOiBzdGF0dXNNZXNzYWdlLCBtZXRhZGF0YTogdHJhaWxlcnMgfSk7XG4gICAgICB9KTtcbiAgICAgIGxpc3RlbmVycyA9IG51bGw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBvbjogZnVuY3Rpb24gKHR5cGUsIGhhbmRsZXIpIHtcbiAgICAgIGxpc3RlbmVyc1t0eXBlXS5wdXNoKGhhbmRsZXIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBjYW5jZWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxpc3RlbmVycyA9IG51bGw7XG4gICAgICBjbGllbnQuY2xvc2UoKTtcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzLkhlYWRzQ2xpZW50ID0gSGVhZHNDbGllbnQ7XG5cbiJdfQ==