"use strict";
// source: DependencyInversion/container.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
goog.exportSymbol('proto.dolittle.dependencyinversion.Binding', null, global);
goog.exportSymbol('proto.dolittle.dependencyinversion.Bindings', null, global);
goog.exportSymbol('proto.dolittle.dependencyinversion.GetBindingsRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dolittle.dependencyinversion.GetBindingsRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dolittle.dependencyinversion.GetBindingsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.dolittle.dependencyinversion.GetBindingsRequest.displayName = 'proto.dolittle.dependencyinversion.GetBindingsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dolittle.dependencyinversion.Binding = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dolittle.dependencyinversion.Binding, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.dolittle.dependencyinversion.Binding.displayName = 'proto.dolittle.dependencyinversion.Binding';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dolittle.dependencyinversion.Bindings = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.dolittle.dependencyinversion.Bindings.repeatedFields_, null);
};
goog.inherits(proto.dolittle.dependencyinversion.Bindings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.dolittle.dependencyinversion.Bindings.displayName = 'proto.dolittle.dependencyinversion.Bindings';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.dolittle.dependencyinversion.GetBindingsRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.dolittle.dependencyinversion.GetBindingsRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.dolittle.dependencyinversion.GetBindingsRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.dolittle.dependencyinversion.GetBindingsRequest.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dolittle.dependencyinversion.GetBindingsRequest}
 */
proto.dolittle.dependencyinversion.GetBindingsRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.dolittle.dependencyinversion.GetBindingsRequest;
    return proto.dolittle.dependencyinversion.GetBindingsRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dolittle.dependencyinversion.GetBindingsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dolittle.dependencyinversion.GetBindingsRequest}
 */
proto.dolittle.dependencyinversion.GetBindingsRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dolittle.dependencyinversion.GetBindingsRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.dolittle.dependencyinversion.GetBindingsRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dolittle.dependencyinversion.GetBindingsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dolittle.dependencyinversion.GetBindingsRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.dolittle.dependencyinversion.Binding.prototype.toObject = function (opt_includeInstance) {
        return proto.dolittle.dependencyinversion.Binding.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.dolittle.dependencyinversion.Binding} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.dolittle.dependencyinversion.Binding.toObject = function (includeInstance, msg) {
        var f, obj = {
            service: jspb.Message.getFieldWithDefault(msg, 1, ""),
            strategy: jspb.Message.getFieldWithDefault(msg, 2, ""),
            strategydata: jspb.Message.getFieldWithDefault(msg, 3, ""),
            scope: jspb.Message.getFieldWithDefault(msg, 4, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dolittle.dependencyinversion.Binding}
 */
proto.dolittle.dependencyinversion.Binding.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.dolittle.dependencyinversion.Binding;
    return proto.dolittle.dependencyinversion.Binding.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dolittle.dependencyinversion.Binding} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dolittle.dependencyinversion.Binding}
 */
proto.dolittle.dependencyinversion.Binding.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setService(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setStrategy(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setStrategydata(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setScope(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dolittle.dependencyinversion.Binding.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.dolittle.dependencyinversion.Binding.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dolittle.dependencyinversion.Binding} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dolittle.dependencyinversion.Binding.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getService();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getStrategy();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getStrategydata();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
    f = message.getScope();
    if (f.length > 0) {
        writer.writeString(4, f);
    }
};
/**
 * optional string Service = 1;
 * @return {string}
 */
proto.dolittle.dependencyinversion.Binding.prototype.getService = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.dolittle.dependencyinversion.Binding} returns this
 */
proto.dolittle.dependencyinversion.Binding.prototype.setService = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string Strategy = 2;
 * @return {string}
 */
proto.dolittle.dependencyinversion.Binding.prototype.getStrategy = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.dolittle.dependencyinversion.Binding} returns this
 */
proto.dolittle.dependencyinversion.Binding.prototype.setStrategy = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string StrategyData = 3;
 * @return {string}
 */
proto.dolittle.dependencyinversion.Binding.prototype.getStrategydata = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.dolittle.dependencyinversion.Binding} returns this
 */
proto.dolittle.dependencyinversion.Binding.prototype.setStrategydata = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional string Scope = 4;
 * @return {string}
 */
proto.dolittle.dependencyinversion.Binding.prototype.getScope = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};
/**
 * @param {string} value
 * @return {!proto.dolittle.dependencyinversion.Binding} returns this
 */
proto.dolittle.dependencyinversion.Binding.prototype.setScope = function (value) {
    return jspb.Message.setProto3StringField(this, 4, value);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dolittle.dependencyinversion.Bindings.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.dolittle.dependencyinversion.Bindings.prototype.toObject = function (opt_includeInstance) {
        return proto.dolittle.dependencyinversion.Bindings.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.dolittle.dependencyinversion.Bindings} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.dolittle.dependencyinversion.Bindings.toObject = function (includeInstance, msg) {
        var f, obj = {
            bindingsList: jspb.Message.toObjectList(msg.getBindingsList(), proto.dolittle.dependencyinversion.Binding.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dolittle.dependencyinversion.Bindings}
 */
proto.dolittle.dependencyinversion.Bindings.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.dolittle.dependencyinversion.Bindings;
    return proto.dolittle.dependencyinversion.Bindings.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dolittle.dependencyinversion.Bindings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dolittle.dependencyinversion.Bindings}
 */
proto.dolittle.dependencyinversion.Bindings.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.dolittle.dependencyinversion.Binding;
                reader.readMessage(value, proto.dolittle.dependencyinversion.Binding.deserializeBinaryFromReader);
                msg.addBindings(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dolittle.dependencyinversion.Bindings.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.dolittle.dependencyinversion.Bindings.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dolittle.dependencyinversion.Bindings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dolittle.dependencyinversion.Bindings.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBindingsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.dolittle.dependencyinversion.Binding.serializeBinaryToWriter);
    }
};
/**
 * repeated Binding Bindings = 1;
 * @return {!Array<!proto.dolittle.dependencyinversion.Binding>}
 */
proto.dolittle.dependencyinversion.Bindings.prototype.getBindingsList = function () {
    return /** @type{!Array<!proto.dolittle.dependencyinversion.Binding>} */ (jspb.Message.getRepeatedWrapperField(this, proto.dolittle.dependencyinversion.Binding, 1));
};
/**
 * @param {!Array<!proto.dolittle.dependencyinversion.Binding>} value
 * @return {!proto.dolittle.dependencyinversion.Bindings} returns this
*/
proto.dolittle.dependencyinversion.Bindings.prototype.setBindingsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.dolittle.dependencyinversion.Binding=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dolittle.dependencyinversion.Binding}
 */
proto.dolittle.dependencyinversion.Bindings.prototype.addBindings = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.dolittle.dependencyinversion.Binding, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dolittle.dependencyinversion.Bindings} returns this
 */
proto.dolittle.dependencyinversion.Bindings.prototype.clearBindingsList = function () {
    return this.setBindingsList([]);
};
goog.object.extend(exports, proto.dolittle.dependencyinversion);
//# sourceMappingURL=data:application/json;base64,