// GENERATED CODE -- DO NOT EDIT!
// Original file comments:
// Copyright (c) Dolittle. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
//
'use strict';
var grpc = require('grpc');
var Services_BoundServices_pb = require('../Services/BoundServices_pb.js');
function serialize_dolittle_runtime_services_ServiceType(arg) {
    if (!(arg instanceof Services_BoundServices_pb.ServiceType)) {
        throw new Error('Expected argument of type dolittle.runtime.services.ServiceType');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dolittle_runtime_services_ServiceType(buffer_arg) {
    return Services_BoundServices_pb.ServiceType.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dolittle_runtime_services_Services(arg) {
    if (!(arg instanceof Services_BoundServices_pb.Services)) {
        throw new Error('Expected argument of type dolittle.runtime.services.Services');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dolittle_runtime_services_Services(buffer_arg) {
    return Services_BoundServices_pb.Services.deserializeBinary(new Uint8Array(buffer_arg));
}
// Represents all the bound gRPC services in the system
var BoundServicesService = exports.BoundServicesService = {
    getForServiceType: {
        path: '/dolittle.runtime.services.BoundServices/GetForServiceType',
        requestStream: false,
        responseStream: false,
        requestType: Services_BoundServices_pb.ServiceType,
        responseType: Services_BoundServices_pb.Services,
        requestSerialize: serialize_dolittle_runtime_services_ServiceType,
        requestDeserialize: deserialize_dolittle_runtime_services_ServiceType,
        responseSerialize: serialize_dolittle_runtime_services_Services,
        responseDeserialize: deserialize_dolittle_runtime_services_Services,
    },
};
exports.BoundServicesClient = grpc.makeGenericClientConstructor(BoundServicesService);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQm91bmRTZXJ2aWNlc19ncnBjX3BiLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJTZXJ2aWNlcy9Cb3VuZFNlcnZpY2VzX2dycGNfcGIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUNBQWlDO0FBRWpDLDBCQUEwQjtBQUMxQiwrQ0FBK0M7QUFDL0MscUdBQXFHO0FBQ3JHLEVBQUU7QUFDRixZQUFZLENBQUM7QUFDYixJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDM0IsSUFBSSx5QkFBeUIsR0FBRyxPQUFPLENBQUMsaUNBQWlDLENBQUMsQ0FBQztBQUUzRSxTQUFTLCtDQUErQyxDQUFDLEdBQUc7SUFDMUQsSUFBSSxDQUFDLENBQUMsR0FBRyxZQUFZLHlCQUF5QixDQUFDLFdBQVcsQ0FBQyxFQUFFO1FBQzNELE1BQU0sSUFBSSxLQUFLLENBQUMsaUVBQWlFLENBQUMsQ0FBQztLQUNwRjtJQUNELE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQztBQUM1QyxDQUFDO0FBRUQsU0FBUyxpREFBaUQsQ0FBQyxVQUFVO0lBQ25FLE9BQU8seUJBQXlCLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLElBQUksVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7QUFDN0YsQ0FBQztBQUVELFNBQVMsNENBQTRDLENBQUMsR0FBRztJQUN2RCxJQUFJLENBQUMsQ0FBQyxHQUFHLFlBQVkseUJBQXlCLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDeEQsTUFBTSxJQUFJLEtBQUssQ0FBQyw4REFBOEQsQ0FBQyxDQUFDO0tBQ2pGO0lBQ0QsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO0FBQzVDLENBQUM7QUFFRCxTQUFTLDhDQUE4QyxDQUFDLFVBQVU7SUFDaEUsT0FBTyx5QkFBeUIsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsSUFBSSxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztBQUMxRixDQUFDO0FBR0QsdURBQXVEO0FBQ3ZELElBQUksb0JBQW9CLEdBQUcsT0FBTyxDQUFDLG9CQUFvQixHQUFHO0lBQ3hELGlCQUFpQixFQUFFO1FBQ2pCLElBQUksRUFBRSw0REFBNEQ7UUFDbEUsYUFBYSxFQUFFLEtBQUs7UUFDcEIsY0FBYyxFQUFFLEtBQUs7UUFDckIsV0FBVyxFQUFFLHlCQUF5QixDQUFDLFdBQVc7UUFDbEQsWUFBWSxFQUFFLHlCQUF5QixDQUFDLFFBQVE7UUFDaEQsZ0JBQWdCLEVBQUUsK0NBQStDO1FBQ2pFLGtCQUFrQixFQUFFLGlEQUFpRDtRQUNyRSxpQkFBaUIsRUFBRSw0Q0FBNEM7UUFDL0QsbUJBQW1CLEVBQUUsOENBQThDO0tBQ3BFO0NBQ0YsQ0FBQztBQUVGLE9BQU8sQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsNEJBQTRCLENBQUMsb0JBQW9CLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEdFTkVSQVRFRCBDT0RFIC0tIERPIE5PVCBFRElUIVxuXG4vLyBPcmlnaW5hbCBmaWxlIGNvbW1lbnRzOlxuLy8gQ29weXJpZ2h0IChjKSBEb2xpdHRsZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4gU2VlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcHJvamVjdCByb290IGZvciBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4vL1xuJ3VzZSBzdHJpY3QnO1xudmFyIGdycGMgPSByZXF1aXJlKCdncnBjJyk7XG52YXIgU2VydmljZXNfQm91bmRTZXJ2aWNlc19wYiA9IHJlcXVpcmUoJy4uL1NlcnZpY2VzL0JvdW5kU2VydmljZXNfcGIuanMnKTtcblxuZnVuY3Rpb24gc2VyaWFsaXplX2RvbGl0dGxlX3J1bnRpbWVfc2VydmljZXNfU2VydmljZVR5cGUoYXJnKSB7XG4gIGlmICghKGFyZyBpbnN0YW5jZW9mIFNlcnZpY2VzX0JvdW5kU2VydmljZXNfcGIuU2VydmljZVR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBhcmd1bWVudCBvZiB0eXBlIGRvbGl0dGxlLnJ1bnRpbWUuc2VydmljZXMuU2VydmljZVR5cGUnKTtcbiAgfVxuICByZXR1cm4gQnVmZmVyLmZyb20oYXJnLnNlcmlhbGl6ZUJpbmFyeSgpKTtcbn1cblxuZnVuY3Rpb24gZGVzZXJpYWxpemVfZG9saXR0bGVfcnVudGltZV9zZXJ2aWNlc19TZXJ2aWNlVHlwZShidWZmZXJfYXJnKSB7XG4gIHJldHVybiBTZXJ2aWNlc19Cb3VuZFNlcnZpY2VzX3BiLlNlcnZpY2VUeXBlLmRlc2VyaWFsaXplQmluYXJ5KG5ldyBVaW50OEFycmF5KGJ1ZmZlcl9hcmcpKTtcbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplX2RvbGl0dGxlX3J1bnRpbWVfc2VydmljZXNfU2VydmljZXMoYXJnKSB7XG4gIGlmICghKGFyZyBpbnN0YW5jZW9mIFNlcnZpY2VzX0JvdW5kU2VydmljZXNfcGIuU2VydmljZXMpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBhcmd1bWVudCBvZiB0eXBlIGRvbGl0dGxlLnJ1bnRpbWUuc2VydmljZXMuU2VydmljZXMnKTtcbiAgfVxuICByZXR1cm4gQnVmZmVyLmZyb20oYXJnLnNlcmlhbGl6ZUJpbmFyeSgpKTtcbn1cblxuZnVuY3Rpb24gZGVzZXJpYWxpemVfZG9saXR0bGVfcnVudGltZV9zZXJ2aWNlc19TZXJ2aWNlcyhidWZmZXJfYXJnKSB7XG4gIHJldHVybiBTZXJ2aWNlc19Cb3VuZFNlcnZpY2VzX3BiLlNlcnZpY2VzLmRlc2VyaWFsaXplQmluYXJ5KG5ldyBVaW50OEFycmF5KGJ1ZmZlcl9hcmcpKTtcbn1cblxuXG4vLyBSZXByZXNlbnRzIGFsbCB0aGUgYm91bmQgZ1JQQyBzZXJ2aWNlcyBpbiB0aGUgc3lzdGVtXG52YXIgQm91bmRTZXJ2aWNlc1NlcnZpY2UgPSBleHBvcnRzLkJvdW5kU2VydmljZXNTZXJ2aWNlID0ge1xuICBnZXRGb3JTZXJ2aWNlVHlwZToge1xuICAgIHBhdGg6ICcvZG9saXR0bGUucnVudGltZS5zZXJ2aWNlcy5Cb3VuZFNlcnZpY2VzL0dldEZvclNlcnZpY2VUeXBlJyxcbiAgICByZXF1ZXN0U3RyZWFtOiBmYWxzZSxcbiAgICByZXNwb25zZVN0cmVhbTogZmFsc2UsXG4gICAgcmVxdWVzdFR5cGU6IFNlcnZpY2VzX0JvdW5kU2VydmljZXNfcGIuU2VydmljZVR5cGUsXG4gICAgcmVzcG9uc2VUeXBlOiBTZXJ2aWNlc19Cb3VuZFNlcnZpY2VzX3BiLlNlcnZpY2VzLFxuICAgIHJlcXVlc3RTZXJpYWxpemU6IHNlcmlhbGl6ZV9kb2xpdHRsZV9ydW50aW1lX3NlcnZpY2VzX1NlcnZpY2VUeXBlLFxuICAgIHJlcXVlc3REZXNlcmlhbGl6ZTogZGVzZXJpYWxpemVfZG9saXR0bGVfcnVudGltZV9zZXJ2aWNlc19TZXJ2aWNlVHlwZSxcbiAgICByZXNwb25zZVNlcmlhbGl6ZTogc2VyaWFsaXplX2RvbGl0dGxlX3J1bnRpbWVfc2VydmljZXNfU2VydmljZXMsXG4gICAgcmVzcG9uc2VEZXNlcmlhbGl6ZTogZGVzZXJpYWxpemVfZG9saXR0bGVfcnVudGltZV9zZXJ2aWNlc19TZXJ2aWNlcyxcbiAgfSxcbn07XG5cbmV4cG9ydHMuQm91bmRTZXJ2aWNlc0NsaWVudCA9IGdycGMubWFrZUdlbmVyaWNDbGllbnRDb25zdHJ1Y3RvcihCb3VuZFNlcnZpY2VzU2VydmljZSk7XG4iXX0=