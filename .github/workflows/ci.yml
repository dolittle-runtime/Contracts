name: Contracts CI/CD

on:
  push:
    branches:
    - '**'
  pull_request:
    types: [closed]

jobs:
  release-context:
    name: Setup context for release
    runs-on: ubuntu-latest
    outputs:
      should-publish: ${{ steps.context.outputs.should-publish }}
      version: ${{ steps.increment-version.outputs.next-version }}
      cascading-release: ${{ steps.context.outputs.cascading-release }}

    steps:
    - uses: actions/checkout@v2
    - name: Establish context
      id: context
      uses: dolittle/establish-context-action@v2 # Replace with ./ if used withing dolittle/establish-context-action

    - name: Increment version
      id: increment-version
      if: ${{ steps.context.outputs.should-publish == 'true' }}
      uses: dolittle/increment-version-action@v2 # Replace with ./ if used withing dolittle/increment-version-action
      with:
        version: ${{ steps.context.outputs.current-version }}
        release-type: ${{ steps.context.outputs.release-type }}

  dot-net-build:
    name: .Net Build
    runs-on: ubuntu-latest
    needs: release-context

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x' # SDK Version to use; x will use the latest version of the 3.1 channel
      - run: dotnet build

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [dot-net-build, release-context]
    if: ${{ needs.release-context.outputs.should-publish == 'true' }}

    steps:
    - uses: actions/checkout@v2
    - name: Create GitHub Release
      uses: dolittle/github-release-action@v1 # Replace with ./ if used withing dolittle/github-release-action
      with:
        cascading-release: ${{ needs.release-context.outputs.cascading-release }}
        version: ${{ needs.release-context.outputs.version }}

  dot-net-release:
    name: .Net Release
    runs-on: ubuntu-latest
    needs: [release-context, dot-net-build]
    if: ${{ needs.release-context.outputs.should-publish == 'true' }}

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v1
      - name: Create packages
        run: dotnet pack --configuration Release -o Artifacts/NuGet /p:PackageVersion=${{ needs.release-context.outputs.version }} -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg
      - name: Push NuGet packages
        run: dotnet nuget push 'Artifacts/NuGet/*.nupkg' --skip-duplicate --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json

  # java-script:
  #   name: JavaScript
  #   runs-on: ubuntu-latest
  #   needs: release-context

  #   steps:
  #   - uses: actions/checkout@v2
  #   - uses: actions/setup-node@v1
  #     with:
  #       node-version: 12.x
  #   - uses: arduino/setup-protoc@master
  #     with:
  #       version: '3.11.2'

  #   - name: Install dependencies
  #     working-directory: ./Generation
  #     run: yarn

  #   - name: Build Fundamentals
  #     working-directory: ./Generation/Fundamentals/JavaScript
  #     run: yarn build
  #   - name: Build Fundamentals Web
  #     working-directory: ./Generation/Fundamentals/JavaScript.Web
  #     run: yarn build
  #   - name: Build Runtime
  #     working-directory: ./Generation/Runtime/JavaScript
  #     run: yarn build
  #   - name: Build Runtime Web
  #     working-directory: ./Generation/Runtime/JavaScript.Web
  #     run: yarn build

  #   - name: Publish Fundamentals
  #     if: ${{ success() && needs.release-context.outputs.should-publish == 'true' }}
  #     working-directory: ./Generation/Fundamentals/JavaScript
  #     run: yarn publish --new-version ${{ needs.release-context.outputs.version }} --no-git-tag-version
  #   - name: Publish Fundamentals Web
  #     if: ${{ success() && needs.release-context.outputs.should-publish == 'true' }}
  #     working-directory: ./Generation/Fundamentals/JavaScript.Web
  #     run: yarn publish --new-version ${{ needs.release-context.outputs.version }} --no-git-tag-version
  #   - name: Publish Runtime
  #     if: ${{ success() && needs.release-context.outputs.should-publish == 'true' }}
  #     working-directory: ./Generation/Runtime/JavaScript
  #     run: yarn publish --new-version ${{ needs.release-context.outputs.version }} --no-git-tag-version
  #   - name: Publish Runtime Web
  #     if: ${{ success() && needs.release-context.outputs.should-publish == 'true' }}
  #     working-directory: ./Generation/Runtime/JavaScript.Web
  #     run: yarn publish --new-version ${{ needs.release-context.outputs.version }} --no-git-tag-version

  #   - name: Create Pull Request
  #     if: ${{ success() && needs.release-context.outputs.should-publish == 'true' }}
  #     uses: peter-evans/create-pull-request@v2
  #     with:
  #       title: Bump package.json versions to ${{ needs.release-context.outputs.version }}
